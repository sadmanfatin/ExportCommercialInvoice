package mnj.ont.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;

import javax.faces.application.FacesMessage;

import mnj.ont.model.popup.views.FillLinesVOImpl;
import mnj.ont.model.services.common.MainAM;
import mnj.ont.model.views.FillStyleVOImpl;
import mnj.ont.model.views.uiview.FillDataVOImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.RowSet;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaManager;
//import oracle.jbo.common.types.ViewCriteria;
import oracle.jbo.domain.Date;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 01 20:31:52 BDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MainAMImpl extends ApplicationModuleImpl implements MainAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MainAMImpl() {
    }

    /**
     * Container's getter for CiHeaders1.
     * @return CiHeaders1
     */
    public ViewObjectImpl getCiHeaders1() {
        return (ViewObjectImpl)findViewObject("CiHeaders1");
    }

    /**
     * Container's getter for CiLines1.
     * @return CiLines1
     */
    public ViewObjectImpl getCiLines1() {
        return (ViewObjectImpl)findViewObject("CiLines1");
    }

    /**
     * Container's getter for IedocExpCiLinesFkLink1.
     * @return IedocExpCiLinesFkLink1
     */
    public ViewLinkImpl getIedocExpCiLinesFkLink1() {
        return (ViewLinkImpl)findViewLink("IedocExpCiLinesFkLink1");
    }
    
    
    /** Start For Pop-Up of Fill Data **/
    
    public void callFetch() {
        ViewObject populatevo = getFillData1();
         if (populatevo.getRowCount() == 0);
        RowSetIterator it = populatevo.createRowSetIterator("aaa");
        Row r[] = populatevo.getAllRowsInRange();
    for (Row row : r) {
            System.out.println("loop count");
            try {
                String flag = row.getAttribute("CheckBox").toString();
                System.out.println("Flag Code -->" + flag);
                if (flag.equals("true"))
                    populateLines(row);


            } catch (Exception e)
            {
              ;
            }


        }

        it.closeRowSetIterator();
    }  
    
    public void populateLines(Row poprow) {

        ViewObject vo = getCiLines1();
        String OrgId = getOrgId();
       

        Row linerow = createBPOLines();

        linerow.setAttribute("Style",
                             getPopulateValue(poprow, "Style"));
        linerow.setAttribute("OrderBpo",
                             getPopulateValue(poprow, "Po"));
        linerow.setAttribute("Dcpo",
                             getPopulateValue(poprow, "Dcpo"));
        linerow.setAttribute("ShipQty",
                             getPopulateValue(poprow, "Qty"));
        linerow.setAttribute("UnitPrice",
                             getPopulateValue(poprow, "UnitPrice"));
        linerow.setAttribute("GoodsValue",
                             getPopulateValue(poprow, "Amount"));
     //   linerow.setAttribute("Attribute4",
     //                        getPopulateValue(poprow, "LatestShipmentDate"));
     //   linerow.setAttribute("Attribute5",
     //                        getPopulateValue(poprow, "Country"));
     //   linerow.setAttribute("Attribute6",
     //                        getPopulateValue(poprow, "PackingList"));
    //    linerow.setAttribute("Attribute7",
    //                         getPopulateValue(poprow, "SalesContratExportLc"));
    //    linerow.setAttribute("Attribute8",
    //                         getPopulateValue(poprow, "SeFrom"));
    //    linerow.setAttribute("Attribute8",
    //                         getPopulateValue(poprow, "SeTo"));
    //    linerow.setAttribute("Attribute8",
     //                        getPopulateValue(poprow, "Status"));
            
            populateLines1(OrgId);
            //populateDetails(getPopulateValue(poprow, "PoNumber"), OrgId);
            
            } //end of populateLines
    
            public void populateLines1(String OrgId) {


                ViewObject populatevo = getFillData1();
                populatevo.setWhereClause("ORG_ID = " + OrgId);
                populatevo.executeQuery();

                if (populatevo.getRowCount() == 0) {
                    populatevo.setWhereClause(null);
                    populatevo.setWhereClause("ORG_ID = " + OrgId);
                    populatevo.executeQuery();
                }


            } //end of populateOrderLines method
    
    
            public void setSessionValues(String orgId, String userId, String respId,
                                         String respAppl) {


                if (userId != null) {
                    FacesContext fctx = FacesContext.getCurrentInstance();
                    ExternalContext ectx = fctx.getExternalContext();
                    HttpSession userSession = (HttpSession)ectx.getSession(false);
                    
                    userSession.setAttribute("userId", userId);
                    userSession.setAttribute("userId", userId);
                    userSession.setAttribute("orgId", orgId);
                    userSession.setAttribute("respId", respId);
                    
                }
                
             
                
            }
    
    
    
    
    
    
            public Row createBPOLines() {

                ViewObject vo = getCiLines1();
                Row row = vo.createRow();
                vo.insertRow(row);
                row.setNewRowState(Row.STATUS_INITIALIZED);
                return row;
            } //end of createHeader
    
            public String getOrgId(){
                
                    
                ViewObject vo = getCiHeaders1();
                String OrgId = null;
                try {

                    OrgId =
                            vo.getCurrentRow().getAttribute("OrgId").toString();

                } catch (Exception e) {
                    // TODO: Add catch code
                    ;
                }
                    return OrgId;
            }
    
    
    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }
    
    
    
    /** End For Fill Data **/


    /**
     * Container's getter for FillData1.
     * @return FillData1
     */
    public FillDataVOImpl getFillData1() {
        return (FillDataVOImpl)findViewObject("FillData1");
    }


//    public void popupSelectActionListener(){
//        System.out.println("OK");
//        ViewObject fillSize = this.getFillLinesVO1();
//        RowSetIterator  fillSizeRowSetIterator = fillSize.createRowSetIterator("fillSizeRowSetIterator"); 
//        while(fillSizeRowSetIterator.hasNext()){
//            Row row = fillSizeRowSetIterator.next();
//            row.setAttribute("multiSelect", "Y"); 
//            System.out.println("OK");
//        }
//        fillSizeRowSetIterator.closeRowSetIterator();
//    }
//
//    public void popupDeselectActionListener(){
//        System.out.println("OK");
//        ViewObject fillSize = this.getFillLinesVO1();
//        RowSetIterator  fillSizeRowSetIterator = fillSize.createRowSetIterator("fillSizeRowSetIterator"); 
//        while(fillSizeRowSetIterator.hasNext()){
//            Row row = fillSizeRowSetIterator.next();
//            row.setAttribute("multiSelect", "N"); 
//            System.out.println("OK");
//        }
//        fillSizeRowSetIterator.closeRowSetIterator();
//    }
//
//    public void fetchLines(){
//        System.out.println("fetchLines");
//        ViewObject fillLinesVO = this.getFillLinesVO1();
//        Row[] allRowsInRange = fillLinesVO.getAllRowsInRange();
//        String multiSelect = null;
//        for (Row row :  allRowsInRange){
//            
//            try{
//                multiSelect = row.getAttribute("multiSelect").toString();
//            }catch(Exception e){
//                multiSelect = "N";
//            }    
//            if(multiSelect.equals("Y")){    
//                Row ciLinesRow = this.getCiLines1().createRow();
//                try{ciLinesRow.setAttribute("GoodsValue", row.getAttribute("Amount").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("InvoiceValue", row.getAttribute("Amount").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("OrderBpo", row.getAttribute("Bpo").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("Uom", row.getAttribute("OrderQuantityUom").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("Dcpo", row.getAttribute("Dcpo").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("ItemDescription", row.getAttribute("OrderedItem").toString());}catch(Exception e){;}
//                //try{System.out.println(" Item No " + row.getAttribute("OrderedItem").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("ShipQty", row.getAttribute("OrderedQuantity").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("Style", row.getAttribute("StyleNumber").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("UnitPrice", row.getAttribute("UnitSellingPrice").toString());}catch(Exception e){;}
//               // try{System.out.println(row.getAttribute("IncoTerms").toString());}catch(Exception e){System.out.println("Inco Terms Exception");} ;
//                try{ciLinesRow.setAttribute("IncoTermsValue", row.getAttribute("IncoTerms").toString());}catch(Exception e){;}
//                System.out.println("IncoTerms " + ciLinesRow.getAttribute("IncoTerms"));
//                try{ciLinesRow.setAttribute("HtsCode", row.getAttribute("HtsCode").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("CartonNo", row.getAttribute("CatNo").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("CartonQuantity", row.getAttribute("CartonQuantity").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("GrossWeight", row.getAttribute("GrossWeight").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("NetNetWeight", row.getAttribute("NetNetWeight").toString());}catch(Exception e){;}
//                try{ciLinesRow.setAttribute("NetWeight", row.getAttribute("NetWeight").toString());}catch(Exception e){;}
//                
//                try{ciLinesRow.setAttribute("Attribute1", row.getAttribute("ShipCancelExBdDate").toString());}catch(Exception e){ System.out.println("catch....");;}
//                
//                try{
//                        System.out.println(row.getAttribute("ShipCancelExBdDate").toString());
//                        System.out.println(ciLinesRow.getAttribute("Attribute1").toString());
//                }catch(Exception e){
//                    
//                        System.out.println("NULLLLL");
//                }
//                
//            }       
//        }
//        
//      }
    
        public void popupSelectActionListener(){
       // System.out.println("OK");
        ViewObject fillSize = this.getFillLinesVO1();
        RowSetIterator  fillSizeRowSetIterator = fillSize.createRowSetIterator("fillSizeRowSetIterator"); 
        while(fillSizeRowSetIterator.hasNext()){
            Row row = fillSizeRowSetIterator.next();
            row.setAttribute("multiSelect", "true"); 
           // System.out.println("true");
        }
        fillSizeRowSetIterator.closeRowSetIterator();
    }

    public void popupDeselectActionListener(){
      //  System.out.println("OK");
        ViewObject fillSize = this.getFillLinesVO1();
        RowSetIterator  fillSizeRowSetIterator = fillSize.createRowSetIterator("fillSizeRowSetIterator"); 
        
        try {
            
            while(fillSizeRowSetIterator.hasNext()){
                Row row = fillSizeRowSetIterator.next();
                row.setAttribute("multiSelect", "false"); 
                //System.out.println("false");
            }
            
            fillSizeRowSetIterator.closeRowSetIterator();
            
        } catch (Exception e) {
            // TODO: Add catch code
            fillSizeRowSetIterator.closeRowSetIterator();
            //e.printStackTrace();
        }
       
       
        
        ViewObject header = this.getCiHeaders1();
        
        String org,buyer,season,lc;
        
//        try{
//            org= header.getCurrentRow().getAttribute("OrgId").toString();
//
//        }catch(Exception e){
//            org=""; 
//        }
//        try{
//            buyer= header.getCurrentRow().getAttribute("Buyer").toString();
//
//        }catch(Exception e){
//            buyer="";
//        }
//        try{
//            season= header.getCurrentRow().getAttribute("Season").toString();
//
//        }catch(Exception e){
//            season="";
//        }    
        
        //if export lc is null then  sales contract 
       // else export lc to filter view object 
        
//        try{
//            
//           // lc= header.getCurrentRow().getAttribute("ContractLcNumber").toString();
//            lc= header.getCurrentRow().getAttribute("ExpNo").toString();
//
//        }catch(Exception e){
//            try{
//                   lc= header.getCurrentRow().getAttribute("ContractLcNumber").toString();
//            }
//            catch(Exception e2){
//                 lc=""; 
//             }
//           
//          
//        }
//        
        
        try{
               lc= header.getCurrentRow().getAttribute("ContractLcNumber").toString();
        }
        catch(Exception e2){
             lc=""; 
         }
        
        
      //  fillSize.setWhereClause("ORG = '"+org+"' AND PARTY_NAME = '"+buyer+"' AND SEASON_NAME = '"+season+"' AND EXPORT_LC = '"+lc+"'");
     //   fillSize.setWhereClause("ORG = '"+org+"' AND PARTY_NAME = '"+buyer+"' AND SEASON_NAME = '"+season+"'");
      //  fillSize.executeQuery();
        
     //   System.out.println("===============        "+"ORG = '"+org+"' AND PARTY_NAME = '"+buyer+"' AND SEASON_NAME = '"+season+"' AND EXPORT_LC = '"+lc+"'");
    }

    public void fetchLines(){
       // System.out.println("fetchLines");
        ViewObject Hvo =  this.getCiHeaders1();
        Row Hrow = Hvo.getCurrentRow(); 
        ViewObject fillLinesVO = this.getFillLinesVO1();
        Row[] allRowsInRange = fillLinesVO.getAllRowsInRange();
        
        String multiSelect = "false";
        String Dcpo = null;
        String country1 = null;
        String style = null;
        ViewObject lvo =   this.getCiLines1();
        for (Row row :  allRowsInRange){
            
            try{
                multiSelect = row.getAttribute("multiSelect").toString();
            }catch(Exception e){
                multiSelect = "false";
            }    
            if(multiSelect.equals("true")){  
                
                Row ciLinesRow = lvo.createRow();
                try{ciLinesRow.setAttribute("GoodsValue", row.getAttribute("Amount").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("InvoiceValue", row.getAttribute("Amount").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("OrderBpo", row.getAttribute("Bpo").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("Uom", row.getAttribute("OrderQuantityUom").toString());}catch(Exception e){;}
                try{
                    Dcpo = row.getAttribute("Dcpo").toString();
                    ciLinesRow.setAttribute("Dcpo", Dcpo);
                }catch(Exception e){;}
                try{ciLinesRow.setAttribute("ItemDescription", row.getAttribute("OrderedItem").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("Attribute2", row.getAttribute("Color").toString());}catch(Exception e){;}
                //try{System.out.println(" Item No " + row.getAttribute("OrderedItem").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("ShipQty", row.getAttribute("ShippedQuantity").toString());}catch(Exception e){;}
                try{
                    style = row.getAttribute("Style").toString();
                    ciLinesRow.setAttribute("Style", style);
                }catch(Exception e){
                    ;
                }
                try{ciLinesRow.setAttribute("UnitPrice", row.getAttribute("UnitSellingPrice").toString());}catch(Exception e){;}
               // try{System.out.println(row.getAttribute("IncoTerms").toString());}catch(Exception e){System.out.println("Inco Terms Exception");} ;
                try{ciLinesRow.setAttribute("IncoTermsValue", row.getAttribute("IncoTerms").toString());}catch(Exception e){;}
              //  System.out.println("IncoTerms " + ciLinesRow.getAttribute("IncoTerms"));
                try{ciLinesRow.setAttribute("HtsCode", row.getAttribute("HtsCode").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("CartonNo", row.getAttribute("CatNo").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("CartonQuantity", row.getAttribute("CartonQuantity").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("GrossWeight", row.getAttribute("GrossWeight").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("NetNetWeight", row.getAttribute("NetNetWeight").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("NetWeight", row.getAttribute("NetWeight").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("PackListNo", row.getAttribute("PckLstNo").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("CbmM3", row.getAttribute("TotalCbm").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("ExcessShortQty", row.getAttribute("ShortExcessQty").toString());}catch(Exception e){;}
                try{ciLinesRow.setAttribute("PercExcessShortQty", row.getAttribute("ShortExcessPer").toString());}catch(Exception e){;}
                try{
                    country1 = row.getAttribute("Country").toString();
                    ciLinesRow.setAttribute("Country", row.getAttribute("Country").toString());
                }catch(Exception e){
                    ;
                }
                try{ciLinesRow.setAttribute("Attribute1", row.getAttribute("ShipCancelExBdDate").toString());}catch(Exception e){ 
                   // System.out.println("catch....");
                    ;}
                try{ciLinesRow.setAttribute("TransportationMode",row.getAttribute("TransportationMode").toString());}catch(Exception e){ 
                    //System.out.println("catch....");
                    ;}
                try{ciLinesRow.setAttribute("Currency",row.getAttribute("Currency").toString());}catch(Exception e){ 
                    //System.out.println("catch....");
                    ;}
                try{
                    System.out.println(row.getAttribute("ShipCancelExBdDate").toString());
                    System.out.println(ciLinesRow.getAttribute("Attribute1").toString());
                }catch(Exception e){
                    
                       // System.out.println("NULLLLL");
                    ;
                }
                try{ciLinesRow.setAttribute("OrderItemId", row.getAttribute("OrderedItemId").toString());}catch(Exception e){
                   // System.out.println("Order Item Error");
                    ;
                    }
                try{
                   // System.out.println("Item Name "+row.getAttribute("ItemName").toString());
                    ciLinesRow.setAttribute("ItemName", row.getAttribute("ItemName").toString());
                }catch(Exception e){
                    // System.out.println("Item Name Error ");
                    ;}
                try{
                  ///  System.out.println("Item Code "+row.getAttribute("ItemCode").toString());
                    ciLinesRow.setAttribute("ItemCode", row.getAttribute("ItemCode").toString());
                }catch(Exception e){
                  //  System.out.println("Item Code Error ");
                    ;
                    }
                
                try{
                  ///  System.out.println("Item Code "+row.getAttribute("ItemCode").toString());
                    ciLinesRow.setAttribute("BpoId", row.getAttribute("BpoId").toString());
                }catch(Exception e){
                  //  System.out.println("Item Code Error ");
                    ;
                    }
 
            }       
        }
        lvo.executeQuery();
        String buyer = null;
        String country = null;
        Hrow.setAttribute("Dcpo", Dcpo);
        Hrow.setAttribute("Attribute12", country1);
        
//          try{
//              buyer = Hrow.getAttribute("Buyer").toString();
//          }catch(Exception e){
//            //  System.out.println("Buyer Error ");  
//              ;
//          }
//          try{
//              country = Hrow.getAttribute("Attribute12").toString();    
//          }catch(Exception e){
//            //  System.out.println("Country Error ");  
//              ;
//          }
// 
      }
    
    public void saveActionButton(){
       // System.out.println("Bettonfore Save Button");
            getExportedValue();
            
      //  System.out.println("saveActionButton");
        ViewObject ciLinesVO = this.getCiLines1();
        String exportDate = null;
        String dbFunction = null;
        String dbFunction2 = null;
        java.sql.CallableStatement cs = null;
        java.sql.CallableStatement cs2 = null;
        String export_lc = null;
        String export_lc2 = null;
        java.sql.Date exportDate1 = null;
        String exportDate11 = null;
        //Row[] allRowsInRange = ciLinesVO.getAllRowsInRange();
        int rowCount = ciLinesVO.getRowCount();
     //   System.out.println("Row Count "+rowCount);
        
     String season ;
     try{
         season = this.getCiHeaders1().getCurrentRow().getAttribute("Season").toString();
     }catch(NullPointerException e){
         
          showMessage( "No Season Given ! Provide season first !", "info");
          return;
                 
      }
        
        
        
        if (rowCount == 1){
           Row row =  ciLinesVO.first();
           String bpo = row.getAttribute("OrderBpo").toString();
        
           String style = row.getAttribute("Style").toString();
          
          
         
      
      
            dbFunction = "BEGIN :1 := MNJ_EXPRT_COMM_INV_LC_NO(:2, :3,:4) ; end;";
            dbFunction2 = "BEGIN :1 := MNJ_EXPRT_COMM_INV_LC_DATE(:2, :3, :4) ; end;";
            //dbFunction2 = "BEGIN :1 := MNJ_EXPRT_COMM_INV_LC_DATE; end;";
          //  System.out.println(dbFunction);
            cs =   getDBTransaction().createCallableStatement(dbFunction, 1);
            cs2 =   getDBTransaction().createCallableStatement(dbFunction2, 1);
            try {
              //  System.out.println("OK");
                cs.setString(2,bpo);
                cs.setString(3,style);
                cs.setString(4, season);
             //   System.out.println("Set BPO");
                
                cs2.setString(3,style);
                cs2.setString(2,bpo);
               

             
                cs.registerOutParameter(1, oracle.jdbc.OracleTypes.VARCHAR);
                  cs.execute();
                
                
                export_lc = cs.getString(1);
                
                if(export_lc.equals("MultipleExportLcForBPO")) {
                    
                    String message ;
                    message = "Multiple Export LC found Style: "+style + " Bpo: "+bpo +" Season: "+season ;
                    showMessage( message, "info");
                    
                 //   ciLinesIterator.closeRowSetIterator();
                    cs.close();
                    return;
                    
                }
                
                
                cs2.registerOutParameter(1, OracleTypes.DATE);
                cs2.setString(4,export_lc);
                cs2.execute();

                exportDate1 =  cs2.getDate(1); //exportDate = cs2.getString(1);
              //  System.out.println("exportDate11 "+exportDate);
              //  System.out.println("get Out Parameter");
                cs.close();
                cs2.close();
            } catch (Exception e) {
             //   System.out.println("OK..............");
                e.printStackTrace();
            }
            ViewObject headerVO = this.getCiHeaders1();
         //   System.out.println(" Export LC No "+export_lc);
         //   System.out.println("Export LC Date "+exportDate1);
            Row headerRow = headerVO.getCurrentRow();
            
            if(export_lc != null){
                headerRow.setAttribute("ExpNo", export_lc);
                headerRow.setAttribute("ExpDate", exportDate1);
                headerRow.setAttribute("Attribute20", "Y");
            }else{
                headerRow.setAttribute("Attribute20", "N");
            }
            
        }else if (rowCount > 1){
            
           System.out.println("=============================     in else ===============================");
            RowSetIterator  ciLinesIterator = ciLinesVO.createRowSetIterator("ciLinesIterator");
            String bpo =  null; //row.getAttribute("OrderBpo").toString();
            //System.out.println("BPO "+bpo);
            String style = null; // row.getAttribute("Style").toString();
          
          
          
            try{
            dbFunction = "BEGIN :1 := MNJ_EXPRT_COMM_INV_LC_NO(:2, :3,:4) ; end;";
            cs =   getDBTransaction().createCallableStatement(dbFunction, 1);
            while(ciLinesIterator.hasNext()){
                
                
                System.out.println("==========================================================");
                
                
                
                Row row = ciLinesIterator.next();
                bpo =   row.getAttribute("OrderBpo").toString();
                style = row.getAttribute("Style").toString();
//                try {
                   
                 System.out.println("======== Style : "+style + " Bpo : "+bpo +" Season : "+season );
                   
                    cs.setString(2,bpo);
                
                    cs.setString(3,style);
                     cs.setString(4, season);
             
                    cs.registerOutParameter(1, oracle.jdbc.OracleTypes.VARCHAR);
                 //   System.out.println("register Out Parameter");
                    cs.execute();
                    export_lc = cs.getString(1);
                
                
                if(export_lc == null){
                     String message ;
                    message = "No Export Lc found for Style: "+style + " Bpo: "+bpo +" Season: "+season ;
                    showMessage( message, "info");
                    
                    ciLinesIterator.closeRowSetIterator();
                    cs.close();
                    return; 
                    
                }
                
                 if(export_lc.equals("MultipleExportLcForBPO")) {
                     
                    String message ;
                    message = "Multiple Export LC found STYLE: "+style + "   BPO: "+bpo +"   SEASON: "+season ;
                    showMessage( message, "info");
                    
                   ciLinesIterator.closeRowSetIterator();
                    cs.close();
                    return;
                    
                }
                
                if (export_lc2 == null)
                {
                  //  System.out.println("if condition");
                  //  System.out.println("Export LC 2"+export_lc2);
                    export_lc2 = export_lc;
                  //  System.out.println("Export LC 2"+export_lc2);
                }
                
                else{
                 //   System.out.println("else condition");
                    //System.out.println("Export lc : "+ export_lc + " exporty lc2 : "+export_lc2 );
                    
                    if(!export_lc.equals(export_lc2)){
                        
                        System.out.println("export_lc : "+export_lc );
                        System.out.println("export_lc2 : "+export_lc2 );
                        
                        showMessage( "Multiple Export LC No. "  , "error");
                        ciLinesIterator.closeRowSetIterator();
                        cs.close();
                        return;
                    }
                }

            }
            try{

                dbFunction2 = "BEGIN :1 := MNJ_EXPRT_COMM_INV_LC_DATE(:2, :3, :4) ; end;";
                //dbFunction2 = "BEGIN :1 := MNJ_EXPRT_COMM_INV_LC_DATE ; end;";
                cs2 =   getDBTransaction().createCallableStatement(dbFunction2, 1);
                cs2.setString(2,bpo);
                cs2.setString(3,style);
                cs2.setString(4,export_lc);
                cs2.registerOutParameter(1, OracleTypes.DATE);
                System.out.println("Execute");
                cs2.execute();
                exportDate1 = cs2.getDate(1);
              //  System.out.println("exportDate1 " +exportDate1);
                cs2.close();
              //  System.out.println("closed");
            }catch(Exception e){
              //  System.out.println(e);
                ;
            }
            ViewObject headerVO = this.getCiHeaders1();
            //System.out.println(" Export LC No "+export_lc);
            Row headerRow = headerVO.getCurrentRow();
            if(export_lc != null){
                headerRow.setAttribute("ExpNo", export_lc);
                headerRow.setAttribute("ExpDate", exportDate1);
                headerRow.setAttribute("Attribute20", "Y");
            }else{
                headerRow.setAttribute("Attribute20", "N");
            }
            ciLinesIterator.closeRowSetIterator();
            cs.close();
               // System.out.println("closed Again");
            }catch(Exception e){
             //   System.out.println("Exception Caught");
                e.printStackTrace();
                ciLinesIterator.closeRowSetIterator();
                //cs.close();
            }
        }
        
        
     //   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        
//        ViewObject headerVO = this.getCiHeaders1();
//        
//       // int header_id = Integer.parseInt(headerVO.getCurrentRow().getAttribute("ExpCiHeaderId").toString()) ;
//        
//        String  header_id = headerVO.getCurrentRow().getAttribute("ExpCiHeaderId").toString() ;
//        int cartonQuantity = 0;
//        
//        
//     String stmt =
//         "BEGIN  APPS.mnj_exp_comm_inv_carton_cal (:1,:2); end;";
//     CallableStatement css =
//         getDBTransaction().createCallableStatement(stmt, 1);
//     try {
//         css.setInt(1, Integer.parseInt(header_id));
//           css.registerOutParameter(2, OracleTypes.NUMBER);
//          css.execute();
//           cartonQuantity  = css.getInt(2);
//          
//            headerVO.getCurrentRow().setAttribute("TotalCartonQty",cartonQuantity );
//         
//         
//            
//        }
//       catch(Exception e){
//         
//         e.printStackTrace();
//         
//       }
     
     
     
  }

    /**
     * Container's getter for FillLinesVO1.
     * @return FillLinesVO1
     
    public FillLinesVOImpl getFillLinesVO1() {
        return (FillLinesVOImpl)findViewObject("FillLinesVO1");
    }

    /**
     * Container's getter for FillLinesVO2.
     * @return FillLinesVO2
     */
    public FillLinesVOImpl getFillLinesVO1() {
        return (FillLinesVOImpl)findViewObject("FillLinesVO1");
    }

    /**
     * Container's getter for CiHeader_FillLines1.
     * @return CiHeader_FillLines1
     */
    public ViewLinkImpl getCiHeader_FillLines1() {
        return (ViewLinkImpl)findViewLink("CiHeader_FillLines1");
    }
    
    public void testDate(){
      //  System.out.println("Test Date");
        try{
        String dbFunction2 = "BEGIN :1 := MNJ_EXPRT_COMM_INV_LC_DATE(:2, :3, :4) ; end;";
        java.sql.CallableStatement  cs2 =   getDBTransaction().createCallableStatement(dbFunction2, 1);
        cs2.setString(2,"1744766");
        cs2.setString(3,"4150093646");
        cs2.setString(4,"240602");
        cs2.registerOutParameter(1, OracleTypes.DATE);
      //  System.out.println("Execute");
        cs2.execute();
        java.sql.Date Date  =  cs2.getDate(1); //cs2.getString(1); //getString(1); //getDATE(1);
      //  System.out.println("exportDate11 " +Date);
            Row row = this.getCiHeaders1().first();
            row.setAttribute("ExpDate", Date);
            
        cs2.close();
        }catch(Exception e){;}
    }
    
    public void headerExecute(){
        ViewObject vo = this.getCiLines1();
        vo.executeQuery();
        RowSetIterator  it = vo.createRowSetIterator("it");
      //  System.out.println(vo.getRowCount());
        double InvoiceValue = 0;
        double invoiceAmount = 0 ;
        double CommissionPercentage = 0.00;
        double TradeDiscountCommission = 0.00;
        double GoodsValue = 0.00;
        double cbm = 0.00;
        double totalCbm = 0.00;
        double shipQty = 0.00;
        double totalShipQty = 0.00;
        double NetWeight = 0.00;
        double totalNetWeight = 0.00;
        double NetNetWeight = 0.00;
        double totalNetNetWeight = 0.00;
        double GrossWeight = 0.00;   
        double totalGrossWeight = 0.00;
        int packListNo = 0;
        int previousPackListNo = 0;  
        double cartonQty = 0.00;
        double totalCartonQty = 0.00;
        
        ViewObject hvo = this.getCiHeaders1();
        Row hrow = hvo.getCurrentRow();
        double TotalContractValue = 0.00;
        try{
            TotalContractValue = Double.parseDouble(hrow.getAttribute("TotalContractValue").toString());         
        }catch(Exception e){
            TotalContractValue = 0.00;    
        }
        while(it.hasNext())
        {
            Row row = it.next();
            try{
                
                try{
                    CommissionPercentage = Double.parseDouble(hrow.getAttribute("CommissionPercentage").toString());
                }catch(Exception ee)
                { CommissionPercentage = 0.00; }
                try{    
                    GoodsValue = Double.parseDouble(row.getAttribute("GoodsValue").toString());
                }catch(Exception ee){
                    GoodsValue = 0.00;
                }
                
                TradeDiscountCommission = (GoodsValue * CommissionPercentage) / 100;
                
                TradeDiscountCommission =    Math.round(TradeDiscountCommission*100.0)/100.0;     // to take 2 digits after point
                
                row.setAttribute("TradeDiscountCommission",TradeDiscountCommission);
                
                
                
                
                InvoiceValue =  GoodsValue - TradeDiscountCommission ;
                
                 InvoiceValue =    Math.round(InvoiceValue*100.0)/100.0;
                
                    row.setAttribute("InvoiceValue",InvoiceValue);
                
                invoiceAmount = invoiceAmount + InvoiceValue;
                                
//                                Double.parseDouble(row.getAttribute("GoodsValue").toString()) + 
//                                Double.parseDouble(row.getAttribute("TradeDiscountCommission").toString()) ;
             //   System.out.println(InvoiceValue);
                
                try{    
                    cbm = Double.parseDouble(row.getAttribute("CbmM3").toString());
                }catch(Exception ee){
                    cbm = 0.00;
                }
                totalCbm = cbm + totalCbm;
                
                try{    
                    shipQty = Double.parseDouble(row.getAttribute("ShipQty").toString());
                }catch(Exception ee){
                    shipQty = 0.00;
                }
                totalShipQty = totalShipQty + shipQty;
                
                try{
                    packListNo = Integer.parseInt(row.getAttribute("PackListNo").toString());
                    
                }catch(Exception ee){
                    packListNo = 0;
                }
                
                try{
                    cartonQty = Double.parseDouble(row.getAttribute("CartonQuantity").toString());
                }catch(Exception ee){
                    cartonQty = 0.00;
                }
                totalCartonQty =  totalCartonQty  + cartonQty ;
                
                try{
                    NetWeight = Double.parseDouble(row.getAttribute("NetWeight").toString());
                }catch(Exception ee){
                    NetWeight = 0.00;
                }
                
                totalNetWeight=  totalNetWeight+NetWeight;
                
                try{    
                    NetNetWeight = Double.parseDouble(row.getAttribute("NetNetWeight").toString());
                }catch(Exception ee){
                    NetNetWeight = 0.00;
                }
                totalNetNetWeight = totalNetNetWeight + NetNetWeight;
                
                try{    
                    GrossWeight = Double.parseDouble(row.getAttribute("GrossWeight").toString());
                }catch(Exception ee){
                    GrossWeight = 0.00;
                }
               totalGrossWeight = totalGrossWeight + GrossWeight;
           //.....................checking.....................//     
//                if(previousPackListNo == 0){
//                    previousPackListNo = packListNo;
//                    totalNetWeight = NetWeight;
//                    totalGrossWeight = GrossWeight;
//                    totalNetNetWeight = NetNetWeight;
//                    totalCartonQty = cartonQty;
//                    totalCbm = cbm;
//                }
//                
//                if(previousPackListNo != packListNo){
//                    totalNetWeight = totalNetWeight + NetWeight; 
//                    totalNetNetWeight = totalNetNetWeight + NetNetWeight;
//                    totalGrossWeight = totalGrossWeight + GrossWeight;
//                    totalCartonQty = totalCartonQty + cartonQty;
//                    totalCbm = cbm + totalCbm;
//                    previousPackListNo = packListNo;
//                }
                //.....................checking.....................// 
            }catch(Exception ew)
            {
                          System.out.println(ew); 
            }
        }
        it.closeRowSetIterator();
        
        
        invoiceAmount =  Math.round(invoiceAmount*100.0)/100.0;   // added on 21/11/17 to keep two digits after decimal point
        
        
        hrow.setAttribute("InvoiceAmount", invoiceAmount);
        
        hrow.setAttribute("TotalCbmM3", totalCbm);
        this.getDBTransaction().commit();
        hrow.setAttribute("TotalNetNetWt", totalNetNetWeight);
        hrow.setAttribute("TotalNetWt", totalNetWeight);
        hrow.setAttribute("TotalQuantity", totalShipQty);
        hrow.setAttribute("TotalGrossWeight", totalGrossWeight);
        
        
      //====================  to calculate carton quantity from procedure  =====================
       int totalCartonQuantity =   getTotalCartonQuantity(hrow);
        hrow.setAttribute("TotalCartonQty",totalCartonQuantity);
      //====================  to calculate carton quantity from procedure  =====================
        
        
          ViewObject expoortValueVO =  this.getExportedValue1();
        Row row = expoortValueVO.getCurrentRow();
        
    
        getExportedValue();
        this.getDBTransaction().commit();
     
                
    }
    
    
    public void getExportedValue(){
      //  System.out.println("getExportedValue Start");
        //RowSetIterator expoortValueVOit = expoortValueVO.createRowSetIterator("expoortValueVOit");
        ViewObject hvo = this.getCiHeaders1();
        Row hrow = hvo.getCurrentRow();
        double invoiceAmount = 0.00;
        double TotalContractValue = 0.00;
        double amount = 0.00;
        try{
           invoiceAmount =  Double.parseDouble(hrow.getAttribute("InvoiceAmount").toString());
        }
        catch(Exception e){
            invoiceAmount = 0.00;
        }
        String ExpCiHeaderId = null;
        try{
           ExpCiHeaderId =  hrow.getAttribute("ExpCiHeaderId").toString();
        }
        catch(Exception e){
            ExpCiHeaderId = null;
        }
        try{
           TotalContractValue =  Double.parseDouble(hrow.getAttribute("TotalContractValue").toString());
        }
        catch(Exception e){
            TotalContractValue = 0.00;
        }
        double TotalExportedValue = 0;
        try{
            TotalExportedValue =Double.parseDouble(hrow.getAttribute("TotalExportedValue").toString()) ;
        }
        catch(Exception e){
            TotalExportedValue = 0;    
        }
//        if(invoiceAmount != 0 && TotalExportedValue.equals("0")){
//            hrow.setAttribute("TotalExportedValue", (invoiceAmount + amount));
//            hrow.setAttribute("Balance", TotalContractValue - (invoiceAmount + amount));
//        }
//        if(invoiceAmount >  Integer.parseInt(TotalExportedValue)){
//            hrow.setAttribute("TotalExportedValue", (invoiceAmount + amount));
//            hrow.setAttribute("Balance", TotalContractValue - (invoiceAmount + amount));
//        }
        
        //if(TotalExportedValue == null){
        ViewObject expoortValueVO =  this.getExportedValue1();
        expoortValueVO.setNamedWhereClauseParam("P_HEADER_ID", ExpCiHeaderId);
        expoortValueVO.executeQuery();
            if(expoortValueVO.getRowCount() > 0 ){
                Row row =  expoortValueVO.first();
                try{
                    amount =  Double.parseDouble(row.getAttribute("InvoiceAmount").toString()) ;
                }catch(Exception e){
                    e.printStackTrace();
                    amount = 0.00;     
                }
                
          //     System.out.println("Exported Invoice Amount "+amount);
           //     System.out.println("Header Invoice Amoiunt "+invoiceAmount);
           //     System.out.println("Calculation "+(invoiceAmount + amount));
                //TotalContractValue = invoiceAmount + amount;
                
                
                TotalExportedValue = Math.round( TotalExportedValue*100.0)/100.0;    
                
                hrow.setAttribute("TotalExportedValue", TotalExportedValue);
                
                
                double balance =0;
                balance = TotalContractValue - (invoiceAmount + amount);
                balance = Math.round( balance*100.0)/100.0; 
                
                hrow.setAttribute("Balance", balance);
                
                
            }else{
                TotalExportedValue = Math.round( TotalExportedValue*100.0)/100.0;  
                
                hrow.setAttribute("TotalExportedValue",  TotalExportedValue);
                
                double balance =0;
                balance = TotalContractValue - (invoiceAmount + amount);
                balance = Math.round( balance*100.0)/100.0; 
                hrow.setAttribute("Balance",  balance);
            }
        
    }
    /**
     * Container's getter for ExportedValue1.
     * @return ExportedValue1
     */
    public ViewObjectImpl getExportedValue1() {
        return (ViewObjectImpl)findViewObject("ExportedValue1");
    }

    /**
     * Container's getter for HeaderExportedVL1.
     * @return HeaderExportedVL1
     */
    public ViewLinkImpl getHeaderExportedVL1() {
        return (ViewLinkImpl)findViewLink("HeaderExportedVL1");
    }
    
    public void copyDocument(){
        
        ViewObject hvo = this.getCiHeaders1();
        Row currentRow = hvo.getCurrentRow();
        String header_ID = null;
        try{
            header_ID = currentRow.getAttribute("ExpCiHeaderId").toString();
        }catch(Exception e){
            ;
        }
    //    System.out.println("ExpCiHeaderId "+header_ID);
        String stmt = "BEGIN  APPS.EXP_CI_HEADERS_COPY_DOCUMENT(:1); end;";
     //   System.out.println("Statment "+stmt);
        CallableStatement cs = getDBTransaction().createCallableStatement(stmt, 1);
        try {
          //  System.out.println("Set Parameter");
            cs.setInt(1, Integer.parseInt(header_ID));
         //   System.out.println("Execute ");
            cs.execute();
         //   System.out.println("Close");
            cs.close();
        } catch (Exception e) {
            e.getMessage();
          //  System.out.println("Copy Exception");
        }
    }
    
    public void amendmentAction(){
        ViewObject hvo = this.getCiHeaders1();
        Row currentRow = hvo.getCurrentRow();
        String header_ID = null;
        try{
            header_ID = currentRow.getAttribute("ExpCiHeaderId").toString();
        }catch(Exception e){
            ;
        }
      //  System.out.println("ExpCiHeaderId "+header_ID);
        String stmt = "BEGIN  APPS.EXP_CI_HEADERS_VER_DOCUMENT(:1); end;";
   //     System.out.println("Statment "+stmt);
        CallableStatement cs = getDBTransaction().createCallableStatement(stmt, 1);
        try {
         //   System.out.println("Set Parameter");
            cs.setInt(1, Integer.parseInt(header_ID));
         ///   System.out.println("Execute ");
            cs.execute();
          //  System.out.println("Close");
            cs.close();
        } catch (Exception e) {
            e.getMessage();
        //    System.out.println("Amendment Exception");
        }   
    }


    /**
     * Container's getter for BrandVO1.
     * @return BrandVO1
     */
    public ViewObjectImpl getBrandVO1() {
        return (ViewObjectImpl)findViewObject("BrandVO1");
    }

    /**
     * Container's getter for Consignee_Notify_Ship_VO1.
     * @return Consignee_Notify_Ship_VO1
     */
    public ViewObjectImpl getConsignee_Notify_Ship_VO1() {
        return (ViewObjectImpl)findViewObject("Consignee_Notify_Ship_VO1");
    }

    /**
     * Container's getter for ShipAddressVO1.
     * @return ShipAddressVO1
     */
    public ViewObjectImpl getShipAddressVO1() {
        return (ViewObjectImpl)findViewObject("ShipAddressVO1");
    }

    /**
     * Container's getter for ConsigneeAddressVO1.
     * @return ConsigneeAddressVO1
     */
    public ViewObjectImpl getConsigneeAddressVO1() {
        return (ViewObjectImpl)findViewObject("ConsigneeAddressVO1");
    }

    /**
     * Container's getter for NotifyAddressVO1.
     * @return NotifyAddressVO1
     */
    public ViewObjectImpl getNotifyAddressVO1() {
        return (ViewObjectImpl)findViewObject("NotifyAddressVO1");
    }


    /**
     * Container's getter for CiLines2VO1.
     * @return CiLines2VO1
     */
    public ViewObjectImpl getCiLines2VO1() {
        return (ViewObjectImpl)findViewObject("CiLines2VO1");
    }

    /**
     * Container's getter for IedocExpCiLines2FkLink1.
     * @return IedocExpCiLines2FkLink1
     */
    public ViewLinkImpl getIedocExpCiLines2FkLink1() {
        return (ViewLinkImpl)findViewLink("IedocExpCiLines2FkLink1");
    }


    /**
     * Container's getter for FillStyleVO1.
     * @return FillStyleVO1
     */
    public FillStyleVOImpl getFillStyleVO1() {
        return (FillStyleVOImpl)findViewObject("FillStyleVO1");
    }
    
    public void generateInvoice(){
    
        ViewObject hvo = this.getCiHeaders1();
        Row currentRow = hvo.getCurrentRow();
        String header_ID = null;
        String org_id = null;
        try{
            header_ID = currentRow.getAttribute("ExpCiHeaderId").toString();
        }catch(Exception e){
            ;
        }
        try{
            org_id = currentRow.getAttribute("OrgId").toString();
        }catch(Exception e){
            ;
        }
      //  System.out.println("ExpCiHeaderId "+header_ID);
      //  System.out.println("org_id "+org_id);
        String stmt = "BEGIN  MNJ_RA_AUTO_INVOICES(:1,:2); end;";
      //  System.out.println("Statment "+stmt);
        CallableStatement cs = getDBTransaction().createCallableStatement(stmt, 1);
        try {
          //  System.out.println("Set Parameter");
            cs.setInt(1, Integer.parseInt(header_ID));
            cs.setInt(2, Integer.parseInt(org_id));
          //  System.out.println("Execute ");
            cs.execute();
          //  System.out.println("Close");
            cs.close();
        } catch (Exception e) {
        //    System.out.println("Exception e "+e);
           // System.out.println("Amendment Exception");
            ;
        }   
    }

    /**
     * Container's getter for ConsigneeNameVO1.
     * @return ConsigneeNameVO1
     */
    public ViewObjectImpl getConsigneeNameVO1() {
        return (ViewObjectImpl)findViewObject("ConsigneeNameVO1");
    }

    /**
     * Container's getter for NotifyToNameVO1.
     * @return NotifyToNameVO1
     */
    public ViewObjectImpl getNotifyToNameVO1() {
        return (ViewObjectImpl)findViewObject("NotifyToNameVO1");
    }

    /**
     * Container's getter for ShipToNameVO1.
     * @return ShipToNameVO1
     */
    public ViewObjectImpl getShipToNameVO1() {
        return (ViewObjectImpl)findViewObject("ShipToNameVO1");
    }

    private int getTotalCartonQuantity(Row hrow) {
        
        
        String  header_id = hrow.getAttribute("ExpCiHeaderId").toString() ;
        
        int cartonQuantity= 0;
        
        String stmt =
         "BEGIN  APPS.exp_comm_inv_carton_cal_2 (:1,:2); end;";
        CallableStatement css =
         getDBTransaction().createCallableStatement(stmt, 1);
        try {
         css.setInt(1, Integer.parseInt(header_id));
           css.registerOutParameter(2, OracleTypes.NUMBER);
          css.execute();
           cartonQuantity  = css.getInt(2);
          
          }
        catch(Exception e){
         
         e.printStackTrace();
         
        }
        
         return cartonQuantity;
    }

    /**
     * Container's getter for ExcelVO1.
     * @return ExcelVO1
     */
    public ViewObjectImpl getExcelVO1() {
        return (ViewObjectImpl)findViewObject("ExcelVO1");
    }
    
    
    
    public  void showMessage(String messege , String severity ) {
        
        
        FacesMessage fm = new FacesMessage(messege);
        
        if(severity.equals("info")){
            fm.setSeverity(FacesMessage.SEVERITY_INFO);
        }
        else if(severity.equals("warn")){
            fm.setSeverity(FacesMessage.SEVERITY_WARN);
        }
        else if(severity.equals("error")){
            fm.setSeverity(FacesMessage.SEVERITY_ERROR);
        }
        
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, fm);
        
    }
    
    
    
}

